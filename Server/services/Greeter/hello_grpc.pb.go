// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: hello.proto

package Greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterServiceClient is the client API for GreeterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type greeterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterServiceClient(cc grpc.ClientConnInterface) GreeterServiceClient {
	return &greeterServiceClient{cc}
}

func (c *greeterServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/Greeter.GreeterService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServiceServer is the server API for GreeterService service.
// All implementations must embed UnimplementedGreeterServiceServer
// for forward compatibility
type GreeterServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedGreeterServiceServer()
}

// UnimplementedGreeterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServiceServer struct {
}

func (UnimplementedGreeterServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedGreeterServiceServer) mustEmbedUnimplementedGreeterServiceServer() {}

// UnsafeGreeterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServiceServer will
// result in compilation errors.
type UnsafeGreeterServiceServer interface {
	mustEmbedUnimplementedGreeterServiceServer()
}

func RegisterGreeterServiceServer(s grpc.ServiceRegistrar, srv GreeterServiceServer) {
	s.RegisterService(&GreeterService_ServiceDesc, srv)
}

func _GreeterService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeter.GreeterService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreeterService_ServiceDesc is the grpc.ServiceDesc for GreeterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter.GreeterService",
	HandlerType: (*GreeterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _GreeterService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}

// TimeServiceClient is the client API for TimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeServiceClient interface {
	Ticktok(ctx context.Context, in *TicktokRequest, opts ...grpc.CallOption) (TimeService_TicktokClient, error)
	Watch(ctx context.Context, opts ...grpc.CallOption) (TimeService_WatchClient, error)
}

type timeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeServiceClient(cc grpc.ClientConnInterface) TimeServiceClient {
	return &timeServiceClient{cc}
}

func (c *timeServiceClient) Ticktok(ctx context.Context, in *TicktokRequest, opts ...grpc.CallOption) (TimeService_TicktokClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeService_ServiceDesc.Streams[0], "/Greeter.TimeService/Ticktok", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeServiceTicktokClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeService_TicktokClient interface {
	Recv() (*NowResponse, error)
	grpc.ClientStream
}

type timeServiceTicktokClient struct {
	grpc.ClientStream
}

func (x *timeServiceTicktokClient) Recv() (*NowResponse, error) {
	m := new(NowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timeServiceClient) Watch(ctx context.Context, opts ...grpc.CallOption) (TimeService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeService_ServiceDesc.Streams[1], "/Greeter.TimeService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeServiceWatchClient{stream}
	return x, nil
}

type TimeService_WatchClient interface {
	Send(*WatchRequest) error
	Recv() (*NowResponse, error)
	grpc.ClientStream
}

type timeServiceWatchClient struct {
	grpc.ClientStream
}

func (x *timeServiceWatchClient) Send(m *WatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeServiceWatchClient) Recv() (*NowResponse, error) {
	m := new(NowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeServiceServer is the server API for TimeService service.
// All implementations must embed UnimplementedTimeServiceServer
// for forward compatibility
type TimeServiceServer interface {
	Ticktok(*TicktokRequest, TimeService_TicktokServer) error
	Watch(TimeService_WatchServer) error
	mustEmbedUnimplementedTimeServiceServer()
}

// UnimplementedTimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeServiceServer struct {
}

func (UnimplementedTimeServiceServer) Ticktok(*TicktokRequest, TimeService_TicktokServer) error {
	return status.Errorf(codes.Unimplemented, "method Ticktok not implemented")
}
func (UnimplementedTimeServiceServer) Watch(TimeService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedTimeServiceServer) mustEmbedUnimplementedTimeServiceServer() {}

// UnsafeTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeServiceServer will
// result in compilation errors.
type UnsafeTimeServiceServer interface {
	mustEmbedUnimplementedTimeServiceServer()
}

func RegisterTimeServiceServer(s grpc.ServiceRegistrar, srv TimeServiceServer) {
	s.RegisterService(&TimeService_ServiceDesc, srv)
}

func _TimeService_Ticktok_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicktokRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeServiceServer).Ticktok(m, &timeServiceTicktokServer{stream})
}

type TimeService_TicktokServer interface {
	Send(*NowResponse) error
	grpc.ServerStream
}

type timeServiceTicktokServer struct {
	grpc.ServerStream
}

func (x *timeServiceTicktokServer) Send(m *NowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TimeService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeServiceServer).Watch(&timeServiceWatchServer{stream})
}

type TimeService_WatchServer interface {
	Send(*NowResponse) error
	Recv() (*WatchRequest, error)
	grpc.ServerStream
}

type timeServiceWatchServer struct {
	grpc.ServerStream
}

func (x *timeServiceWatchServer) Send(m *NowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *timeServiceWatchServer) Recv() (*WatchRequest, error) {
	m := new(WatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeService_ServiceDesc is the grpc.ServiceDesc for TimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter.TimeService",
	HandlerType: (*TimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ticktok",
			Handler:       _TimeService_Ticktok_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _TimeService_Watch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServiceClient interface {
	// Server Stream
	LotsOfReplies(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (StreamService_LotsOfRepliesClient, error)
	// Client Stream
	// rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);
	// Bidirectional Stream
	BidiHello(ctx context.Context, opts ...grpc.CallOption) (StreamService_BidiHelloClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) LotsOfReplies(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (StreamService_LotsOfRepliesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], "/Greeter.StreamService/LotsOfReplies", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceLotsOfRepliesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_LotsOfRepliesClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type streamServiceLotsOfRepliesClient struct {
	grpc.ClientStream
}

func (x *streamServiceLotsOfRepliesClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) BidiHello(ctx context.Context, opts ...grpc.CallOption) (StreamService_BidiHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[1], "/Greeter.StreamService/BidiHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBidiHelloClient{stream}
	return x, nil
}

type StreamService_BidiHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type streamServiceBidiHelloClient struct {
	grpc.ClientStream
}

func (x *streamServiceBidiHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBidiHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility
type StreamServiceServer interface {
	// Server Stream
	LotsOfReplies(*HelloRequest, StreamService_LotsOfRepliesServer) error
	// Client Stream
	// rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);
	// Bidirectional Stream
	BidiHello(StreamService_BidiHelloServer) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (UnimplementedStreamServiceServer) LotsOfReplies(*HelloRequest, StreamService_LotsOfRepliesServer) error {
	return status.Errorf(codes.Unimplemented, "method LotsOfReplies not implemented")
}
func (UnimplementedStreamServiceServer) BidiHello(StreamService_BidiHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiHello not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_LotsOfReplies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).LotsOfReplies(m, &streamServiceLotsOfRepliesServer{stream})
}

type StreamService_LotsOfRepliesServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type streamServiceLotsOfRepliesServer struct {
	grpc.ServerStream
}

func (x *streamServiceLotsOfRepliesServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_BidiHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).BidiHello(&streamServiceBidiHelloServer{stream})
}

type StreamService_BidiHelloServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type streamServiceBidiHelloServer struct {
	grpc.ServerStream
}

func (x *streamServiceBidiHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBidiHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LotsOfReplies",
			Handler:       _StreamService_LotsOfReplies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiHello",
			Handler:       _StreamService_BidiHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}
